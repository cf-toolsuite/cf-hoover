plugins {
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
    id 'org.springframework.boot' version '3.0.5'
    // id 'org.springframework.experimental.aot' version '0.9.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.github.ben-manes.versions' version '0.46.0'
    id 'io.freefair.lombok' version '8.0.1'
    id 'java'
    id 'jacoco'
    id 'com.google.cloud.tools.jib' version '3.3.1'
    id 'maven-publish'
    id 'com.github.spotbugs' version '5.0.14'
    id 'info.solidsoft.pitest' version '1.9.11'
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "UTC"
}

spotbugs {
    toolVersion = '4.7.3'
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'low'
    showProgress = true
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
    }
}

group = 'io.pivotal'
sourceCompatibility = JavaVersion.VERSION_17

repositories {
    maven { url 'https://repo.spring.io/release' }
    mavenCentral()
}

ext {
    set('springCloudServicesVersion', '4.0.2')
    set('springCloudVersion', '2022.0.2')
    set('spring-cloud-services-connectors.version', '4.0.2')
}

dependencyManagement {
	imports {
	    mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${springCloudServicesVersion}"
	    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// bootBuildImage {
//     builder = "paketobuildpacks/builder:tiny"
//     environment = [
//         "BP_NATIVE_IMAGE" : "true"
//     ]
// }

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}

configurations {
    // exclude Logback
    implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    [apiElements, runtimeElements].each {
      it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
      it.outgoing.artifact(bootJar)
    }
}

test {
    useJUnitPlatform()
    testLogging {
	events "passed", "skipped", "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jacoco {
    toolVersion = "0.8.8"
}

pitest {
    testPlugin = "junit5"
    jvmArgs = ['-Xmx1024m']
    threads = 5
    targetClasses = ['io.pivotal.cfapp.*']
    outputFormats = ['XML', 'HTML']
}

dependencies {
    annotationProcessor('org.projectlombok:lombok')
    implementation('org.projectlombok:lombok')
    implementation('org.springframework.boot:spring-boot-configuration-processor')
    implementation('org.apache.commons:commons-lang3')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('io.pivotal.spring.cloud:spring-cloud-services-starter-config-client')
    implementation('io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry')
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    implementation('com.lmax:disruptor:3.4.4')
    implementation('com.github.ben-manes.caffeine:caffeine:3.1.5')
    implementation('org.apache.httpcomponents:httpclient:4.5.14')
    implementation('io.projectreactor:reactor-core:3.5.5')
    implementation('io.projectreactor.netty:reactor-netty:1.1.5')
    implementation('io.micrometer:micrometer-registry-prometheus')
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.assertj:assertj-core:3.24.2')
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.junit.jupiter:junit-jupiter-params')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    testImplementation('org.mockito:mockito-core')
    testImplementation('org.mockito:mockito-junit-jupiter')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	exclude group: 'junit', module: 'junit'
    }
}

publishing {
    publications {
        gpr(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'cf-hoover'
                url = 'https://github.com/pacphi/cf-hoover'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'pacphi'
                        name = 'Chris Phillipson'
                        email = 'cphillipson@pivotal.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/pacphi/cf-hoover.git'
                    developerConnection = 'scm:git:ssh://github.com/pacphi/cf-hoover.git'
                    url = 'https://github.com/pacphi/cf-hoover'
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/pacphi/cf-hoover"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

javadoc {
    failOnError = false
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

bootJar.enabled = true
jar.enabled = false

test.finalizedBy jacocoTestReport
