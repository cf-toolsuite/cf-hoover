plugins {
    id 'com.gorylenko.gradle-git-properties' version '2.2.0'
    id 'org.springframework.boot' version '2.2.0.M6'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.github.ben-manes.versions' version '0.25.0'
    id 'io.franzbecker.gradle-lombok' version '3.2.0'
	id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.spotbugs' version '2.0.0'
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "UTC"
}

spotbugs {
    toolVersion = '4.0.0-beta1'
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'low'
    showProgress = true
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        html {
            enabled = true
        }
        xml {
            enabled = false
        }
    }
}

group = 'io.pivotal'
version = '0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

repositories {
	mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

ext {
	set('springCloudServicesVersion', '2.1.4.RELEASE')
	set('springCloudVersion', 'Hoxton.M2')
    set('spring-cloud-services-connectors.version', '2.1.4.RELEASE')
    set('spring-framework.version', '5.2.0.RC2')
}

dependencyManagement {
	imports {
		mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${springCloudServicesVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}

configurations {
    implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

jacoco {
	toolVersion = "0.8.4"
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
		csv.enabled = false
	}
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
	}
}

dependencies {
	annotationProcessor('org.projectlombok:lombok')
    implementation('org.projectlombok:lombok')
    implementation('org.springframework.boot:spring-boot-configuration-processor')
    implementation('org.apache.commons:commons-lang3')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('io.pivotal.spring.cloud:spring-cloud-services-starter-config-client')
    implementation('io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry')
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    implementation('io.projectreactor:reactor-core:3.3.0.RC1')
    implementation('io.projectreactor.netty:reactor-netty:0.9.0.RC1')
    implementation('io.micrometer:micrometer-registry-prometheus')
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.junit.jupiter:junit-jupiter-params')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    testImplementation('org.mockito:mockito-core')
    testImplementation('org.mockito:mockito-junit-jupiter')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'junit', module: 'junit'
	}
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
        mavenJava(MavenPublication) {
            pom {
                name = 'cf-hoover'
                url = 'https://github.com/pacphi/cf-hoover'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'pacphi'
                        name = 'Chris Phillipson'
                        email = 'cphillipson@pivotal.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/pacphi/cf-hoover.git'
                    developerConnection = 'scm:git:ssh://github.com/pacphi/cf-hoover.git'
                    url = 'https://github.com/pacphi/cf-hoover'
                }
            }
        }
    }
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = false
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

check.dependsOn jacocoTestReport
